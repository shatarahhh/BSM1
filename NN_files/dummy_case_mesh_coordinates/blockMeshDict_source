/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

wedgeHalfAngle 2.5; // total wedge = 5Â°, half-angle = 2.5
tanHalfAngle #calc "tan(degToRad($wedgeHalfAngle))";

//inputs
H_1 H1;
H_2 H2;
H_3 H3;
H_4 H4;

Y_2 Y2;
Y_3 Y3;
Y_4 Y4;

theta_1 theta1;

// 1) X coordinates
H_0 0.2;// not used
H_5 #calc "0.5*($H_2-$H_1)+$H_1";

x0 $H_0;    
x1 $H_1; 
x2 $H_5; 
x3 $H_2; //  not used
x4 $H_2; 
x5 #calc "$x4+0.04";
x6 $H_3;
x7 #calc "$x6+0.04";
x8 $H_4;  

// 2) Y coordinates
Y_5 0.1;
Y_1 0.3;

Y_6    #calc "($H_4-$H_2)*tan(degToRad($theta_1))";
Y_max   #calc "$Y_5+$Y_3+$Y_6+$Y_4";

Y_7 #calc "$Y_4+$Y_6+$Y_3/1.99";

y0 0.0;
y1 #calc "$Y_4";  
y2 #calc "$Y_4+$Y_6";
y3 #calc "$Y_max-$Y_2";
y4 #calc "$Y_max-$Y_1";  
y5 #calc "$Y_max-$Y_5"; 
y6 $Y_max;


// 3) Vertices definition.
//    We use the same indexing and order that you provided originally.
//    Negative side first (z = -x * tanHalfAngle), indices 0..21,
//    then positive side (z = +x * tanHalfAngle), indices 22..43,
//    then the "extra wall" in the middle, indices 44..51.

vertices
(
    // ------------------- NEGATIVE SIDE (z = - x * tanHalfAngle) -------------------
    // (0    6.47   -0.5)  -->  ( x0, y5, -x0*tanHalfAngle )
    ( $x0 $y4 #calc "(-1.0 * $x0 * $tanHalfAngle)" )  //0
    ( $x0 $y6 #calc "(-1.0 * $x0 * $tanHalfAngle)" )  //1

    // (0.4  0      -0.5)
    ( $x1 $y0 #calc "(-1.0 * $x1 * $tanHalfAngle)" )  //2
    ( $x1 $y1 #calc "(-1.0 * $x1 * $tanHalfAngle)" )  //3
    ( $x1 $y3 #calc "(-1.0 * $x1 * $tanHalfAngle)" )  //4
    ( $x1 $y4 #calc "(-1.0 * $x1 * $tanHalfAngle)" )  //5
    ( $x1 $y6 #calc "(-1.0 * $x1 * $tanHalfAngle)" )  //6

    // (0.6  0      -0.5)
    ( $x2 $y0 #calc "(-1.0 * $x2 * $tanHalfAngle)" )  //7

    // (3  4.0   -0.5) hopper end
    ( $x3 $y1 #calc "(-1.0 * $x3 * $tanHalfAngle)" )  //8 not used
    ( $x3 $y3 #calc "(-1.0 * $x3 * $tanHalfAngle)" )  //9 not used
    ( $x3 $y4 #calc "(-1.0 * $x3 * $tanHalfAngle)" )  //10 not used
    ( $x3 $y6 #calc "(-1.0 * $x3 * $tanHalfAngle)" )  //11 not used

    // (3  4.0   -0.5) well start
    ( $x4 $y1 #calc "(-1.0 * $x4 * $tanHalfAngle)" )  //12
    
    ( $x6 $y3 #calc "(-1.0 * $x6 * $tanHalfAngle)" )  //13
    ( $x6 $y4 #calc "(-1.0 * $x6 * $tanHalfAngle)" )  //14
    ( $x6 $y6 #calc "(-1.0 * $x6 * $tanHalfAngle)" )  //15
    
    // (3  4.0   -0.5) wel end
    ( $x5 $y1 #calc "(-1.0 * $x5 * $tanHalfAngle)" )  //16
    
    ( $x7 $y3 #calc "(-1.0 * $x7 * $tanHalfAngle)" )  //17
    ( $x7 $y5 #calc "(-1.0 * $x7 * $tanHalfAngle)" )  //18
    ( $x7 $y6 #calc "(-1.0 * $x7 * $tanHalfAngle)" )  //19
    
    // (9.15 4.87 -0.5) tank end
    ( $x8 $y2 #calc "(-1.0 * $x8 * $tanHalfAngle)" )  //20
    ( $x8 $Y_7 #calc "(-1.0 * $x8 * $tanHalfAngle)" )  //21
    ( $x8 $y5 #calc "(-1.0 * $x8 * $tanHalfAngle)" )  //22
    ( $x8 $y6 #calc "(-1.0 * $x8 * $tanHalfAngle)" )  //23

    // ------------------- POSITIVE SIDE (z = + x * tanHalfAngle) -------------------
    // Exactly the same (x,y) as above but with the plus sign for z

    ( $x0 $y4 #calc "(1.0 * $x0 * $tanHalfAngle)" )  //24 (24+0)
    ( $x0 $y6 #calc "(1.0 * $x0 * $tanHalfAngle)" )  //25

    // (0.4  0      -0.5)
    ( $x1 $y0 #calc "(1.0 * $x1 * $tanHalfAngle)" )  //26
    ( $x1 $y1 #calc "(1.0 * $x1 * $tanHalfAngle)" )  //27
    ( $x1 $y3 #calc "(1.0 * $x1 * $tanHalfAngle)" )  //28
    ( $x1 $y4 #calc "(1.0 * $x1 * $tanHalfAngle)" )  //29
    ( $x1 $y6 #calc "(1.0 * $x1 * $tanHalfAngle)" )  //30

    // (0.6  0      -0.5)
    ( $x2 $y0 #calc "(1.0 * $x2 * $tanHalfAngle)" )  //31

    // (3  4.0   -0.5) hopper end
    ( $x3 $y1 #calc "(1.0 * $x3 * $tanHalfAngle)" )  //32 not used
    ( $x3 $y3 #calc "(1.0 * $x3 * $tanHalfAngle)" )  //33 not used
    ( $x3 $y4 #calc "(1.0 * $x3 * $tanHalfAngle)" )  //34 not used
    ( $x3 $y6 #calc "(1.0 * $x3 * $tanHalfAngle)" )  //35 not used

    // (3  4.0   -0.5) well start
    ( $x4 $y1 #calc "(1.0 * $x4 * $tanHalfAngle)" )  //36
    
    ( $x6 $y3 #calc "(1.0 * $x6 * $tanHalfAngle)" )  //37
    ( $x6 $y4 #calc "(1.0 * $x6 * $tanHalfAngle)" )  //38
    ( $x6 $y6 #calc "(1.0 * $x6 * $tanHalfAngle)" )  //39
    
    // (3  4.0   -0.5) wel end
    ( $x5 $y1 #calc "(1.0 * $x5 * $tanHalfAngle)" )  //40
    
    ( $x7 $y3 #calc "(1.0 * $x7 * $tanHalfAngle)" )  //41
    ( $x7 $y5 #calc "(1.0 * $x7 * $tanHalfAngle)" )  //42
    ( $x7 $y6 #calc "(1.0 * $x7 * $tanHalfAngle)" )  //43
    
    // (9.15 4.87 -0.5) tank end
    ( $x8 $y2 #calc "(1.0 * $x8 * $tanHalfAngle)" )  //44
    ( $x8 $Y_7 #calc "(1.0 * $x8 * $tanHalfAngle)" )  //45
    ( $x8 $y5 #calc "(1.0 * $x8 * $tanHalfAngle)" )  //46
    ( $x8 $y6 #calc "(1.0 * $x8 * $tanHalfAngle)" )  //47
);

x_m_1 5;
x_m_2 40;
x_m_3 10;
x_m_4 1;
x_m_5 40;

y_m_1 12;
y_m_2 20;
y_m_3 15;
y_m_4 6;

y_m_6 2;
y_m_5 #calc "$y_m_3+$y_m_4-$y_m_6";

x_s_1 (3 -1.5);
x_s_2 3;

y_s_1 2;
y_s_2 -1.5;
y_s_3 1.2;
//y_s_2 (3 -3);

blocks
(
  //  hex (0 5 6 1 24 29 30 25)
  // ($x_m_1 $y_m_4 1)
  // simpleGrading (1 $y_s_3 1) 
    

    hex (2 7 12 3 26 31 36 27)
    ($x_m_2 $y_m_1 1)
    simpleGrading ($x_s_1 $y_s_1 1) 

    hex (3 12 13 4 27 36 37 28)
    ($x_m_2 $y_m_2 1)
    simpleGrading ($x_s_1 1 1) 
    
    hex (4 13 14 5 28 37 38 29)
    ($x_m_2 $y_m_3 1)
    simpleGrading ($x_s_1 $y_s_2 1) 
    
    hex (5 14 15 6 29 38 39 30)
    ($x_m_2 $y_m_4 1)
    simpleGrading ($x_s_1 $y_s_3 1)
    
    
    hex (12 16 17 13 36 40 41 37)
    ($x_m_4 $y_m_2 1)
    simpleGrading (1 1 1) 
     
    
    hex (16 20 21 17 40 44 45 41)
    ($x_m_5 $y_m_2 1)
    simpleGrading ($x_s_2 1 1)  
  
    hex (17 21 22 18 41 45 46 42)
    ($x_m_5 $y_m_5 1)
    simpleGrading ($x_s_2 1 1)  
    
    hex (18 22 23 19 42 46 47 43)
    ($x_m_5 $y_m_6 1)
    simpleGrading ($x_s_2 1 1)  
    
);

edges
(
);

boundary
( 
    inlet
    {
        type patch;
        faces
        (
         //   (0 1 24 25)
         (5 6 29 30)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (22 23 46 47)
        );
    }
    
    hopper_outlet
    {
        type patch;
        faces
        (
              (2 7 26 31)
        );
    }
    
    Wall
    {
        type wall;
        faces
        ( 
            //inlet bottom Wall 
            // (0 5 24 29)
             
            //left sideWalls
            //(3 4 25 26)
            (2 3 26 27)
            (3 4 27 28)
            (4 5 28 29)

            //middle Walls for water well
            (13 14 37 38)
            (14 15 38 39)
 
            (13 17 37 41)
                        
            (17 18 41 42)
            (18 19 42 43)
            
            //right sideWalls
            (20 21 44 45)
            (21 22 45 46)
        );
    }
    bottom
    {
        type wall;
        faces
        (     
         //   (3 10 25 32)
            (7 12 31 36)      
            (12 16 36 40)
            (16 20 40 44)
        );
    }
    top
    {
        type symmetryPlane;
        faces
        (
        //upper free surface
        //    (1 6 25 30)
            (6 15 30 39)
            (19 23 43 47)
        );
    }
  
    front
    {
        type wedge;
        faces
        (

         //   (0 5 6 1)   
            (2 7 12 3)   
           (3 12 13 4)   
            (4 13 14 5)   
             (5 14 15 6)    
             (12 16 17 13)   
            (16 20 21 17)   
            (17 21 22 18)   
            (18 22 23 19) 
  
        );
    }
    
    back
    {
        type wedge;
        faces
        (
        //    (24 29 30 25) 

            (26 31 36 27)

            (27 36 37 28)

            (28 37 38 29)

            (29 38 39 30)

            (36 40 41 37)

            (40 44 45 41)

            (41 45 46 42)

            (42 46 47 43)
            

        );
    }

);

    
    
// ************************************************************************* //
